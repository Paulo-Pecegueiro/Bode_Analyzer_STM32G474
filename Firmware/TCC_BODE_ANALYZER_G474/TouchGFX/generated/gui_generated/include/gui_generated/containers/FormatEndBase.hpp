/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FORMATENDBASE_HPP
#define FORMATENDBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class FormatEndBase : public touchgfx::Container
{
public:
    FormatEndBase();
    virtual ~FormatEndBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setCloseContainerCallback(touchgfx::GenericCallback<>& callback)
    {
        this->CloseContainerCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitCloseContainerCallback()
    {
        if (CloseContainerCallback && CloseContainerCallback->isValid())
        {
            this->CloseContainerCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Box boxBackground;
    touchgfx::Image imgWarning;
    touchgfx::TextArea lblMessage;
    touchgfx::ButtonWithLabel btnOk;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* CloseContainerCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<FormatEndBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // FORMATENDBASE_HPP
