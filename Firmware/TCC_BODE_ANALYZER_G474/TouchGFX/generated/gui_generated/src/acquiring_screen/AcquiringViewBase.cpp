/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/acquiring_screen/AcquiringViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

AcquiringViewBase::AcquiringViewBase() :
    buttonCallback(this, &AcquiringViewBase::buttonCallbackHandler),
    acquisitionAborted1CloseContainerCallback(this, &AcquiringViewBase::acquisitionAborted1CloseContainerCallbackHandler),
    frameCountScreenTickInterval(0)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    Background.setPosition(0, 0, 800, 480);
    Background.setColor(touchgfx::Color::getColorFromRGB(52, 70, 82));
    add(Background);

    boxBackground.setPosition(21, 44, 758, 393);
    boxBackground.setColor(touchgfx::Color::getColorFromRGB(73, 101, 117));
    add(boxBackground);

    boxTitleBack.setPosition(107, 24, 587, 74);
    boxTitleBack.setColor(touchgfx::Color::getColorFromRGB(216, 229, 247));
    add(boxTitleBack);

    btnAbort.setXY(280, 370);
    btnAbort.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON1_ID), touchgfx::Bitmap(BITMAP_BUTTON2_ID));
    btnAbort.setLabelText(touchgfx::TypedText(T___SINGLEUSE_TGWZ));
    btnAbort.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btnAbort.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btnAbort.setAction(buttonCallback);
    add(btnAbort);

    imgProgress.setXY(75, 263);
    imgProgress.setProgressIndicatorPosition(2, 2, 646, 16);
    imgProgress.setRange(0, 100);
    imgProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    imgProgress.setBackground(touchgfx::Bitmap(BITMAP_PROGRESSBAR_ID));
    imgProgress.setBitmap(BITMAP_PROGRESSBAR2_ID);
    imgProgress.setValue(0);
    imgProgress.setAnchorAtZero(true);
    add(imgProgress);

    txtProgress.setXY(313, 297);
    txtProgress.setProgressIndicatorPosition(12, 1, 150, 42);
    txtProgress.setRange(0, 100);
    txtProgress.setColor(touchgfx::Color::getColorFromRGB(216, 229, 247));
    txtProgress.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6AX0));
    txtProgress.setBackground(touchgfx::Bitmap(BITMAP_BUTTON3_ID));
    txtProgress.setValue(0);
    add(txtProgress);

    lblTitle.setXY(197, 37);
    lblTitle.setColor(touchgfx::Color::getColorFromRGB(89, 88, 92));
    lblTitle.setLinespacing(0);
    lblTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I4V0));
    add(lblTitle);

    lblFilterON.setXY(262, 157);
    lblFilterON.setColor(touchgfx::Color::getColorFromRGB(216, 229, 247));
    lblFilterON.setLinespacing(0);
    lblFilterON.setTypedText(touchgfx::TypedText(T___SINGLEUSE_70NV));
    add(lblFilterON);

    lblFilterSettingTime.setXY(93, 157);
    lblFilterSettingTime.setColor(touchgfx::Color::getColorFromRGB(216, 229, 247));
    lblFilterSettingTime.setLinespacing(0);
    lblFilterSettingTime.setTypedText(touchgfx::TypedText(T___SINGLEUSE_51M2));
    lblFilterSettingTime.setVisible(false);
    add(lblFilterSettingTime);

    lblTestingDevice.setXY(161, 157);
    lblTestingDevice.setColor(touchgfx::Color::getColorFromRGB(216, 229, 247));
    lblTestingDevice.setLinespacing(0);
    Unicode::snprintf(lblTestingDeviceBuffer, LBLTESTINGDEVICE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OOVY).getText());
    lblTestingDevice.setWildcard(lblTestingDeviceBuffer);
    lblTestingDevice.resizeToCurrentText();
    lblTestingDevice.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UZK2));
    lblTestingDevice.setVisible(false);
    add(lblTestingDevice);

    lblTestDone.setXY(82, 157);
    lblTestDone.setColor(touchgfx::Color::getColorFromRGB(216, 229, 247));
    lblTestDone.setLinespacing(0);
    lblTestDone.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LE4O));
    lblTestDone.setVisible(false);
    add(lblTestDone);

    acquisitionAborted1.setXY(147, 115);
    acquisitionAborted1.setVisible(false);
    acquisitionAborted1.setCloseContainerCallback(acquisitionAborted1CloseContainerCallback);
    add(acquisitionAborted1);
}

AcquiringViewBase::~AcquiringViewBase()
{

}

void AcquiringViewBase::setupScreen()
{
    acquisitionAborted1.initialize();
}

void AcquiringViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btnAbort)
    {
        //Abort_Click
        //When btnAbort clicked call virtual function
        //Call Abort_Click
        Abort_Click();
    }
}

void AcquiringViewBase::acquisitionAborted1CloseContainerCallbackHandler()
{
    //Ok_Click
    //When acquisitionAborted1 CloseContainer call virtual function
    //Call Ok_Click
    Ok_Click();
}

void AcquiringViewBase::afterTransition()
{
    //TransitionEnds
    //When screen transition ends call virtual function
    //Call TransitionEnds
    TransitionEnds();
}

void AcquiringViewBase::GoToMainMenu()
{
    //GoToMainMenu_Action
    //When GoToMainMenu is called change screen to MainMenu
    //Go to MainMenu with no screen transition
    application().gotoMainMenuScreenNoTransition();
}

void AcquiringViewBase::GoToGraphs()
{
    //GoToGraphs_Action
    //When GoToGraphs is called change screen to GraphicsScreen
    //Go to GraphicsScreen with no screen transition
    application().gotoGraphicsScreenScreenNoTransition();
}

void AcquiringViewBase::handleTickEvent()
{
    frameCountScreenTickInterval++;
    if(frameCountScreenTickInterval == TICK_SCREENTICK_INTERVAL)
    {
        //ScreenTick
        //When every N tick call virtual function
        //Call ScreenTick
        ScreenTick();
        frameCountScreenTickInterval = 0;
    }
}
